# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

import passwords

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
	worker.Worker("gd-windows-gcc-492", passwords.gd_windows_gcc_492_password)
	]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/4ian/GD.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["builder-windows-gcc-492-build"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["builder-windows-gcc-492-build"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

git_clone_step = steps.Git(
	name="Git",
	haltOnFailure=True,
	repourl="git://github.com/4ian/GD.git",
	mode="incremental",
	branch="master")

create_dir_step = steps.MakeDirectory(
	name="Build folder creation",
	haltOnFailure=True,
	dir="build/build")

cmake_step = steps.ShellCommand(
	name="CMake",
	haltOnFailure=True,
	command=["cmake", "-G", "MinGW Makefiles", ".."],
	workdir="build/build")

make_step = steps.ShellCommand(
	name="Make",
	haltOnFailure=True,
	command=["mingw32-make"],
	workdir="build/build")

innosetup_packaging_step = steps.ShellCommand(
	name="Installer creation",
	haltOnFailure=True,
	command=["PackageForWindows.bat"],
	workdir="build/Binaries/Packaging")

package_upload_1_step = steps.FileUpload(
	name="Upload to online storage (1/2)",
	haltOnFailure=True,
	workersrc="Binaries/Releases/gd4090.exe",
	masterdest="temporary/installer.exe")

package_upload_2_step = steps.FileUpload(
	name="Upload to online storage (2/2)",
	haltOnFailure=True,
	workersrc="Binaries/Releases/gd4xxxx.7z",
	masterdest="temporary/archive.7z")

nightly_publish_step = steps.MasterShellCommand(
	name="Nightly publishing",
	haltOnFailure=True,
	command="""
		cp temporary/installer.exe /var/www/gd/nightlies/files/gdevelop-`date +%y%m%d`.exe
		cp temporary/archive.7z /var/www/gd/nightlies/files/gdevelop-`date +%y%m%d`.7z
		chmod 755 /var/www/gd/nightlies/files/gdevelop-`date +%y%m%d`.exe
		chmod 755 /var/www/gd/nightlies/files/gdevelop-`date +%y%m%d`.7z
		"""
)

factory_windows_gcc492 = util.BuildFactory()
factory_windows_gcc492.addStep(git_clone_step)
factory_windows_gcc492.addStep(create_dir_step)
factory_windows_gcc492.addStep(cmake_step)
factory_windows_gcc492.addStep(make_step)
factory_windows_gcc492.addStep(innosetup_packaging_step)
factory_windows_gcc492.addStep(package_upload_1_step)
factory_windows_gcc492.addStep(package_upload_2_step)
factory_windows_gcc492.addStep(nightly_publish_step)

c['builders'] = [
		util.BuilderConfig(name="builder-windows-gcc-492-build",
			workernames=["gd-windows-gcc-492"],
			factory=factory_windows_gcc492)
	]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "GDevelop"
c['titleURL'] = "http://www.compilgames.net"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://victorlevasseur.com:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
